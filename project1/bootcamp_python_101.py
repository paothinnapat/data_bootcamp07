# -*- coding: utf-8 -*-
"""Bootcamp - Python 101

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UEyozDPXAKai6g1L477NVtGe7nviiAid
"""

print("I am learning Python 101")

# comment
# this is a note
print(1 + 1)
print(2 * 2)
print(5*3)

# basic calculation
1 + 1
2 * 2
5 - 3
print(7 / 2)
7 // 2 # floor division

# pow = power
pow(5, 2)

# abs = absolute
abs(-666)

# modulo (%)
5 % 2

# 5 building blocks
# 1. variables
# 2. data types
# 3. data structures
# 4. function
# 5. control flow
# 6. OOP

# assign a variables
my_name = "pao"
age = 25
gpa = 3.4
movie_lover = True # False

my_name

# Python is a case sensitive c != C
print(age, gpa, movie_lover, my_name)

#  over write a value
age = 26
print(age)

s23_price = 30000
discount = 0.15
new_s23_price = s23_price * (1-discount)

print(new_s23_price)

# remove variable
del new_s23_price

# count variable
age = 25
age += 1
age += 1
age += 1
age -= 2
age *= 2
age /= 2
age

# data types
# int float str bool

age = 25
gpa = 3.41
school = "RMUTR"
movie_lover = True

# check data types
print(type(age))
print(type(gpa))
print(type(school))
print(type(movie_lover))

# convert type
x = 100
x = str(x)
print(x, type(x))

y = True # T=1 , F=0
y = int(y)
print(y, type(y))

z = 1
z = bool(z)
print(z, type(z))

age = 25
print(age+age, age*2, age/2)

text = "I'm learning Python"
text2 = ' "hahaha" '
print(text, text2)

text = "hello"
text + " " + text

# type hint
age: int = 25
my_name: str = "pao"
gpa: float = 3.4
print(age, type(age))

# function
print("hello", "world")
print(pow(5, 2), abs(-5))

# greeting()
def greeting(name = "pao", location = "Japan"):
    print("hello! " + name + " from " + location)
    print("How was " + location +" ?")

greeting("pao")

def add_two_nums(num1, num2):
    print("result is ..")
    return num1 + num2

result = add_two_nums(5, 25)
print(result)

def add_two_nums(a: int, b: int):
    return a+b

add_two_nums(5, 6)

# work with string
long_text = """this is
a very long
test"""
print(long_text)

# string template : fstrings
my_name = "pao"
location = "Bangkok"

text = f"Hi my name is {my_name} and I live in {location}"

print(text)

"Hi! my name is {}, location: {}".format(my_name, location)

text = "a duck walks into a bar"
print(text)

# slicing, index starts with 0
print(text[0], text[22])

# string is immutable
name = "Python" # -> Cython
name = "C" + name[1:]
print(name)

text = "a duck walks into a bar"

# function vs. method
# string methods
text = text.upper()
print(text)

text = text.lower()
print(text)

text = text.title()
print(text)

text.replace("duck", "lion")

words = text.split(" ")
print(words, type(words))

">".join(words)

# method = function สร้างขึ้นมาสำหรับ object นั้น
# string methods
# string is immutable

# data structure
# 1. list []
# 2. tuple ()
# 3. dictionary {}
# 4. set {unique}

# list is mutable
shopping_items = ["banana", "egg", "milk"]

shopping_items[0] = "Pineapple"
print(shopping_items[0])
print(shopping_items[1])
print(shopping_items[1:])
print( len(shopping_items))

# list methods
shopping_items.append("egg")
print(shopping_items)

# sort items (ascending order, A-Z)
shopping_items.sort()
shopping_items.sort(reverse=True) # descending order
print(shopping_items)

scores = [90, 88, 85, 92, 75]
print(sum(scores), min(scores), max(scores))

sum(scores) / len(scores) # mean

# reusable
def mean(scores):
    return sum(scores)/len(scores)

scores = [90, 88, 85, 92, 75]
print(sum(scores), min(scores), max(scores), mean(scores))

# remove last item
shopping_items.pop()
shopping_items

shopping_items.remove("egg")
shopping_items

# .insert()
shopping_items.insert(1, "milk")
shopping_items

# list + list
items1 = ['egg', 'milk']
items2 = ['banana', 'bread']

print(items1 + items2)

# tuple () is immutable
tup_items = ('egg', 'bread', 'pepsi', 'egg', 'egg')
tup_items

tup_items.count('egg')

# username password
# student1, student2
s1 = ("id001", "123456")
s2 = ("id002", "654321")
user_pw = (s1, s2)

print(user_pw)

# tuple unpacking
username, password = s1
print(username, password)

# tuple unpacking 3 values
name, age, _ = ("John", 42, 3.98)
print(name, age)

# set {unique}
courses = ["Python", "Python", "R", "SQL", "SQL", "SQL"]

set(courses)

# dictionary key: value pairs
courses = {
    "name": "Data Science Bootcamp",
    "duration": "4 months",
    "students": 200,
    "replay": True,
    "skills": ["Google sheets", "SQL", "R", "Python",
               "Stats", "ML", "Dashboard", "Data Transformation"]
}

courses

courses["name"]

courses["start_time"] = "9am"
courses

courses["language"] = "Thai"
courses

# delete
del courses["language"]
courses

del courses["start_time"]
courses

courses["replay"] = False
courses

courses["skills"][-3:]

list(courses.keys())

list(courses.values())

list(courses.items())

courses.get("replay")

# list, dictionary = mutable
# tuple, string = immutable

# control flow
# if for while

# final exam 150, pass >= 120
def grade(score):
    if score >= 120:
        return "perfect"
    elif score >= 100:
        return "good"
    elif score >= 80:
        return "okay"
    else:
        return "Read more!"

result = grade(100)
print(result)

# use and, or in condition
# courses == data science, score >= 80 passed
# courses == english, score >= 70 passed
def grade(courses, score):
    if courses == "english" and score >= 70:
        return "passed"
    elif courses == "data science" and score >= 80:
        return "passed"
    else:
        return "failed"

grade("english", 72)

# for loop
# if score >= 80, passes

def grading_all(scores):
    new_scores = []
    for score in scores:
        new_scores.append(score+2)
    return new_scores

grading_all([75, 88, 90, 95, 52])

[s*2 for s in scores]

# list comprehension
friends = ["toy", "ink", "bee", "zue", "yos"]
[f.upper() for f in friends]

# while loop
count = 0

while count < 5:
    count += 1
    print("hello")

# chatbot for fruit order
user_name = input("What is your name?")

def chatbot():
    fruits = []
    while True:
        fruit = input("Order your fruit: ")
        if fruit == "exit":
            return fruits
        fruits.append(fruit)

chatbot()

# HW01 - chatbot to order pizza
# HW02 - pow ying chub

age= int(input("how old are u ? "))

type(age)

# HW 2 Pow Ying Chub
from IPython.utils.path import random
def play_game():
    print("Welcome to POW YING CHUB! game")
    print("Choose one to start!, type 'exit' to quit")
    options = ["hammer", "scissor", "paper"]
    print(options)
    your_score = 0
    computer_score = 0

    while True:
        text = input("What U choose: ")
        if text == "exit":
            print("Thanks for played")
            print("your_score: ",your_score)
            print("computer_score: ",computer_score)
            if your_score > computer_score:
                print("You win!!")
            elif your_score == computer_score:
                print("We Tied")
            else:
                print("You Lose!!")
            break
        else:
            user_select = text
            computer_select = random.choice(options)
            print("Computer select: ",computer_select)
            if user_select == computer_select:
                print("Tie!")
            elif user_select == "hammer" and computer_select == "scissor":
                print("You win!")
                your_score = your_score + 1
            elif user_select == "hammer" and computer_select == "paper":
                print("You Lose!")
                computer_score = computer_score + 1
            elif user_select == "scissor" and computer_select == "paper":
                print("You win!")
                your_score = your_score + 1
            elif user_select == "scissor" and computer_select == "hammer":
                print("You Lose!")
                computer_score = computer_score + 1
            elif user_select == "paper" and computer_select == "hammer":
                print("You win!")
                your_score = your_score + 1
            elif user_select == "paper" and computer_select == "scissor":
                print("You win!")
                computer_score = computer_score + 1
            else:
                print("Try again")

play_game()

from IPython.utils.path import random
options = ["hammer", "scissor", "paper"]
random.choice(options)

# OOP = Object Oriented Programming
# Dog Class

class Dog:
    def __init__(self, name, age, breed):
        self.name = name
        self.age = age
        self.breed = breed

dog1 = Dog("ovaltine", 2, "chihuahua")
dog2 = Dog("milo", 3, "bulldog")
dog3 = Dog("pepsi", 3.5, "german shepherd")

print(dog1.name, dog1.age, dog1.breed)
print(dog2.name, dog2.age, dog2.breed)

dog4 = Dog("wick", 4, "assasin")

class Employee:

    def __init__(self, id, name, dept, pos):
        self.id = id
        self.name = name
        self.dept = dept
        self.pos = pos

    def hello(self):
        print(f"Hello! my name is {self.name}")

    def work_hours(self, hours):
        print(f"{self.name} works for {hours} hours.")

    def change_dept(self,new_dept):
        self.dept = new_dept
        print(f"{self.name} is now in {self.dept}.")

emp1 = Employee(1, "John", "Finance", "Financial Analyst")

print(emp1.name, emp1.pos)

emp1.hello()

emp1.work_hours(10)

emp1.change_dept("Data Science")

# Object: attribute => name, id, dept, pos
# Object: method => hello(), change_dept()

# HW3 - create new ATM class

class ATM:
    def __init__(self, name, acc, bank, balance, pin):
        self.name = name
        self.acc = acc
        self.bank = bank
        self.balance = balance
        self.pin = pin

    def deposit(self, amount):
        self.balance += amount
        print(f"Deposited ${amount}. Current balance: ${self.balance}")

    def withdraw(self, amount):
        if self.balance >= amount:
            self.balance -= amount
            print(f"Withdrew ${amount}. Current balance: ${self.balance}")
        else:
            print("Insufficient funds!")

    def check_balance(self):
        print(f"Current balance: ${self.balance}")

    def transfer(self, amount, recipient):
        if self.balance >= amount:
            self.balance -= amount
            recipient.balance += amount
            print(f"Transferred ${amount} to {recipient.name}. Current balance: ${self.balance}")
        else:
            print("Insufficient funds!")

    def change_pin(self, new_pin):
        self.pin = new_pin
        print("PIN changed successfully!")

    def get_transaction_history(self):
        # This is just a placeholder function, you can implement it as needed
        print("Transaction history not available.")

    def bank_check(self):
        print(f"Your depositing with {self.bank} bank.")

atm1 = ATM("Fei", "000-000-000", "Kasikorn", 500, 182345)
print(f"This account is for {atm1.name} number is: {atm1.acc} have ${atm1.balance} remaining")

atm1.check_balance()

atm1.transfer(600, "000-000-001")

atm2 = ATM("Pao", "000-000-001", "Kasikorn", 500, 170341)
atm1.transfer(100, atm2)

atm2.bank_check()

