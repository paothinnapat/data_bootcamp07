# basic knowledge programming
# 1. variable
# 2. data types
# 3. data structures
# 4. control flow
# 5. function

# create variable
income <- 28000
income <- 80000 # if run this it will overwrite "income" variable
expense <- 19500
saving <- income - expense

# remove variable
rm(saving)
rm(income)
rm(expense)

# data types
# 1. numeric
# 2. character (text)
# 3. date
# 4. logical (TRUE, FALSE)
# More..

x <- 20
my_name <- "Pao" # variable can't be start with number
movie_lover <- TRUE

class(my_name) # to check variable class
class(movie_lover)

is.numeric(x) # to check if variable is numeric or not
is.character(movie_lover) # to check if variable is character or not

# YYYY-MM-DD
date <- "2023-04-13"
date <- as.Date(date) # to convert character into date
class(date)

# data structures
# 1. vector
# 2. matrix
# 3. list
# 4. dataframe

# vector
# vector collect only one data type at a time

friends <- c("Pao", "Fei", "Ploy", "Aoy", "Guy")

friends[1] # [] use to extract something in that position of that vextor
friends[1:3] # : mean to ex: 1:3 = 1 to 3
friends[1] <- "PP" # change data in friends in position 1 to "PP"
friends[1:2] <- c("Pao", "Feifei") # to change multiple data at a time

which(friends == "Pao") # to find the positon of that data

# matrix
# matrix == vector 2 dimension

m <- matrix(friends, ncol=2, byrow=TRUE) # matrix spilt data into column #ncol = number of column
seq(1, 50, 2)


m1 <- matrix(c(5,10,2,4), ncol = 2)

m2 <- matrix(c(1,2,5,5), ncol = 2)

m1 * m2

y <- 1:6 # incase y is 1 to 6
dim(y) <- c(3,2) # to dimension 1 to 6 into 2 column

# list
# list can collect multiple data types/objects

my_playlist <- list(
  fav_movies = c("Chainsaw Man","Naruto","One Piece"),
  fav_songs = c("OMG","Ditto","Attention"),
  fav_artist = "Feifei"
)

my_playlist$fav_movie # $ is use to look for data in the list

my_playlist[[1]] # [[]] double bracket mean to extract only data without variable name

my_playlist[[1]][3] # look from my_playlist choose in fav_movies in position 3

# customer database

customer_01 <- list(
  name = "Pao",
  location = "BKK",
  age = 25,
  fav_movies = "Chainsaw Man"
)

customer_02 <- list(
  name = "Fei",
  location = "Goteburg",
  age = 20,
  fav_movies = "Naruto"
)

customer_db <- list(
  pao <- customer_01,
  fei <- customer_02
)

names(customer_db)


# dataframe
# table in Google Sheets/ sql database

View(mtcars)

data() # to view all data

friends = c("Pao", "Fei", "Ploy", "Guy", "Aoy")

20 -> x # this equal to x -> 20 only in R

ages <- c(24, 20, 20, 26, 25)

movie_lover <- c(T, T, T, F, F)

df <- data.frame(id = 1:5,
          friend=friends,
          age=ages,
          movie_love=movie_lover)

# alterative approach to create dataframe in R

customers <- list(
  friends = c("John", "David", "Anna"),
  ages = c(25, 20, 19),
  movie = c(T, T, F)
)

df <- data.frame(id = 1:3,
           customers)

# Not Available = Null SQL

is.na(ages) # to check null

df$friend

df$age

df$movie_love

df[[2]]

df[2:3] # choose column 2 to 3 df[row, column]

df[2:3, ] # choose row 2 to 3 in all column

df[, c("friend", "age")] # choose every row in friend and age column

df[1, 2] <- "Paopao" # replace in row 1 column 2 with "Paopao"

which(df$friend == "Fei")

fei_index <- which(df$friend == "Fei")

df[fei_index, "friend"] <- "Fei_gf"

df$age < 30

df[df$age < 30, ] # choose in row age that less than 30 from every column

df[df$movie_love == TRUE,] # TRUE == !FALSE ,(!) is negative

friend_nomovie <- df[df$movie_love == FALSE,]

condition <- df$age < 21 & df$movie_love # condition of friends ages less than 21 and a movie_lover

df[condition,]

# OR in R
## |

cond <- df$age >= 22 | df$movie_love # friends ages equal to 22 above OR movie_lover

df[cond,]

write.csv(df, "friends.csv", row.names = F) # to save table in csv


df <- read.csv("friends.csv") # to open csv file to R

# control flow
# user defined function

add_two_nums <- function(v1, v2) {   # create functions inside{} is body of function
  return(v1 + v2)
}

add_two_nums(1,2) # to use functions

cube <- function(x) x**3 # create cube function

my_power <- function(base,pow) base**pow # create power function #base,pow = parameter # number that use = argument

my_power <- function(base,pow = 3) { # pow = 3 to set default to 3 but can be change by type pow=..
  return(base**pow)
}

# no input function

greeting <- function() print("hello!")

greeting_name <- function(name) {
  text = paste("Hello", name)
  print(text)
}

greeting_bot <- function(){ # create bot to greet after ask name
  username = readline("What's your name? :")
  print(paste("Hello!", username))
  
  your_age = readline("How old are you? :")
  your_age = as.numeric(your_age) # convert age into numeric
  print(paste("You are", your_age, "years old."))
  
  score = readline("What your score? :")
  score = as.numeric(score)
  grade_cal(score)
}


# control flow
# if, for, while

# function is a reuseable piece of code

grade_cal <- function(score) {
  if(score >= 80) {
    print("Passed")
  } else if (score >= 50) {
    print("OK")
  } else {
    print("Retake exam!")
  }
}

# for loop

numbers <- (1:5)

friends <- c("pao",
             "fei",
             "ploy")

for (friend in friends) {
  print(paste("Hi!", friend))
}

paste("Hi!", friends)


play_game <- function() {
  options <- c("hammer", "scissor", "paper")
  print(options)
  print("Choose one!")
  
  user_select <- readline("What U choose:")
  computer_select <- sample(options,1)

  
  if (user_select == computer_select) {
    print("Tie!")
  } else if (user_select == "hammer" & computer_select == "scissor") {
    print("You win!")
  } else if (user_select == "hammer" & computer_select == "paper") {
    print ("You lose!")
  } else if (user_select == "scissor" & computer_select == "paper") {
    print ("You win!")
  } else if (user_select == "scissor" & computer_select == "hammer") {
    print ("You lose!")
  } else if (user_select == "paper" & computer_select == "hammer") {
    print ("You lose!")
  } else print ("You win!")
}


# regular expression

state.name

city_with_K <- grep("^K", state.name)

city_end_s <- grep("s%", state.name)

city_with_new <- grep("new", state.name, ignore.case = TRUE)

state.name[city_with_new]

## HW2 Rock Paper Scissor

play_game <- function() {
  
  print("Welcome to the game")
  print("Choose one to start!, type 'exit' to quit")
  options <- c("hammer", "scissor", "paper")
  print(options)
  your_score <- 0
  computer_score <- 0
  
  while (TRUE) {
    
    text = readline("What U choose:")
    if (text == "exit") {
      print("Thank you for play game.")
      print(paste("your_score:",your_score))
      print(paste("computer_score:",computer_score))
      if (your_score > computer_score ) {
        print("YOU WINâœ¨!!")
      } else if (your_score == computer_score) {
        print("WE TIED")
      } else {
        print("YOU LOSEðŸ˜ˆ")
      }
      break
    } else {
    user_select <- text
    computer_select <- sample(options,1)
    print(paste("Computer select:",computer_select))
    
    if (user_select == computer_select) {
        print("Tie!")
        } else if (user_select == "hammer" & computer_select == "scissor") {
          print ("You win!")
          your_score <- your_score + 1
        } else if (user_select == "hammer" & computer_select == "paper") {
          print ("You lose!")
          computer_score <- computer_score + 1
        } else if (user_select == "scissor" & computer_select == "paper") {
          print ("You win!")
          your_score <- your_score + 1
        } else if (user_select == "scissor" & computer_select == "hammer") {
          print ("You lose!")
          computer_score <- computer_score + 1
        } else if (user_select == "paper" & computer_select == "hammer") {
          print ("You win!")
          your_score <- your_score + 1
        } else if (user_select == "paper" & computer_select == "scissor") {
          print ("You lose!")
          computer_score <- computer_score + 1
        } else {
          print ("Try again")
        }
  } 
  }
}
